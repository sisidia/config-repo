spring:
  application:
    name: gateway-service    # 서비스 ID (컨피그 클라이언트가 어떤 서비스를 조회하는지 매핑)
  profiles:
    active: default         # 서비스가 실행할 기본 프로파일
  redis:
    host: fcev.obigo.com
    port: 6379
    password: start44
    database: 0
  cloud:
    gateway:
        discovery:
        locator:
          enabled: true
        default-filters:
#          - name: GlobalFilter
          - name: RequestRateLimiter
            args:
               key-resolver: "#{@userKeyResolver}"
               redis-rate-limiter.replenishRate: 1 #1초당 요청을 허용 값
               redis-rate-limiter.burstCapacity: 1 #1초당 최대 응닶 값
               baseMessage: Spring Cloud Gateway GlobalFilter
               preLogger: true
               postLogger: true
        routes:
          - id: event-service
            uri: lb://EVENT-SERVICE
            predicates:
              - Path=/event/**
            filters:
              - RewritePath=/event/?(?<segment>.*), /$\{segment}
              - name: UserFilter
                args:
                  baseMessage: Spring Cloud Gateway UserFilter
                  preLogger: true
                  postLogger: true
          - id: oauth-service
            uri: lb://OAUTH-SERVICE
            predicates:
              - Path=/oauth*/**
            filters:
#              - RewritePath=/token/?(?<segment>.*), /$\{segment}
              - name: TokenFilter
                args:
                  baseMessage: Spring Cloud Gateway TokenFilter
                  preLogger: true
                  postLogger: true
          - id: oauth-resource-service
            uri: lb://OAUTH-RESOURCE-SERVICE
            predicates:
              - Path=/v1/**
            filters:
#              - RewritePath=/token/?(?<segment>.*), /$\{segment}
              - name: ResourceFilter
                args:
                  baseMessage: Spring Cloud Gateway TokenFilter
                  preLogger: true
                  postLogger: true
          - id: config-server
            uri: lb://CONFIG-SERVER
            predicates:
              - Path=/config*/**
            filters:
              - RewritePath=/config/?(?<segment>.*), /$\{segment}
              - name: TokenFilter
                args:
                  baseMessage: Spring Cloud Gateway CONFIGFilter
                  preLogger: true
                  postLogger: true
    config:
      uri: http://localhost:8889  # Config Server 위치
your.name: "aaaaaa"
rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: '{cipher}d29b12c27b7e81464503b5047e7c2d9eca91ec85909d9b9c05c256c0847df4fe'
management:
  health:
    redis:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      ebabked: true 
    
eureka:   ## 추가
  instance:
    instance-id: gateway-instance
    prefer-ip-address: false       ## 서비스 이름 대신 IP 주소 등록
    lease-renewal-interval-in-seconds: 3  # 디스커버리한테 3초마다 하트비트 전송 (디폴트 30초)
    lease-expiration-duration-in-seconds: 2 # 디스커버리는 서비스 등록 해제 하기 전에 마지막 하트비트에서부터 설정된 시간(second) 기다린 후 서비스 등록 해제 (디폴트 90초)
  client:
    register-with-eureka: true    ## Eureka Server 에 서비스 등록
    fetch-registry: true          ## 레지스트리 정보를 로컬에 캐싱
    service-url:
      defaultZone: http://localhost:8761/eureka/ 
